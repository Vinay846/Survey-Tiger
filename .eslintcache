[{"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\index.js":"1","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\App.js":"2","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\reportWebVitals.js":"3","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\create-survey.js":"4","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\single-select.js":"5","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\multi-select.js":"6","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\store\\global-store.js":"7","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\store\\surveySlice.js":"8","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\store\\responseSlice.js":"9","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\take-survey.js":"10","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\confirm-survey.js":"11","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\survey.js":"12","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\survey-result.js":"13"},{"size":756,"mtime":1609530832729,"results":"14","hashOfConfig":"15"},{"size":1572,"mtime":1609615383127,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1875,"mtime":1609596204329,"results":"18","hashOfConfig":"15"},{"size":2625,"mtime":1609596988772,"results":"19","hashOfConfig":"15"},{"size":3209,"mtime":1609605579812,"results":"20","hashOfConfig":"15"},{"size":345,"mtime":1609531375234,"results":"21","hashOfConfig":"15"},{"size":1226,"mtime":1609614386027,"results":"22","hashOfConfig":"15"},{"size":330,"mtime":1609614968865,"results":"23","hashOfConfig":"15"},{"size":712,"mtime":1609608026164,"results":"24","hashOfConfig":"15"},{"size":5541,"mtime":1609746353077,"results":"25","hashOfConfig":"15"},{"size":5359,"mtime":1609745917329,"results":"26","hashOfConfig":"15"},{"size":4778,"mtime":1609746550214,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"56calh",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\index.js",[],["59","60"],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\App.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\reportWebVitals.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\create-survey.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\single-select.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\multi-select.js",[],["61","62"],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\store\\global-store.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\store\\surveySlice.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\store\\responseSlice.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\take-survey.js",[],"C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\confirm-survey.js",["63","64"],"import React,{useState, useEffect} from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { surveySlice } from '../store/surveySlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport '../App.css';\r\n\r\nexport default function ConfirmSurvey() {\r\n    const [answers, setAnswers] = useState([]);\r\n    const { surveyId } = useParams();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const survey = useSelector((globalStore) => \r\n        globalStore.surveys.find((s) => s.surveyId === surveyId)\r\n    );\r\n\r\n    const confirmAndPublishSurvey=()=> {\r\n        dispatch(surveySlice.actions.markPublished({surveyId}));\r\n        dispatch(surveySlice.actions.addAnswer({surveyId, answers}));\r\n        history.push(\"/\");\r\n    };\r\n    \r\n\r\n    const saveAnswer=(e, qId, type)=> {\r\n        // console.log(\"input value \",e.target.value);\r\n        let currOption = answers.find((a) => a.qId === String(qId))\r\n        if(type === 'multiple'){\r\n            if(e.target.checked){\r\n                currOption.type = 'multiple';\r\n                if(e.target.className === 'option1'){\r\n                    currOption.ans[0] = e.target.value;\r\n                }else if(e.target.className === 'option2'){\r\n                    currOption.ans[1] = e.target.value;\r\n                }\r\n                else if(e.target.className === 'option3'){\r\n                    currOption.ans[2] = e.target.value;\r\n                }\r\n                else if(e.target.className === 'option4'){\r\n                    currOption.ans[3] = e.target.value;\r\n                }\r\n            }else{\r\n                if(e.target.className === 'option1'){\r\n                    currOption.ans[0] = ''\r\n                }else if(e.target.className === 'option2'){\r\n                    currOption.ans[1] = ''\r\n                }\r\n                else if(e.target.className === 'option3'){\r\n                    currOption.ans[2] = ''\r\n                }\r\n                else if(e.target.className === 'option4'){\r\n                    currOption.ans[3] = ''\r\n                }\r\n            }\r\n        }else {\r\n            currOption.type = 'single';\r\n            if(e.target.className === 'option1'){\r\n                currOption.ans[0] = e.target.value;\r\n                currOption.ans[1] = '';\r\n            }else if(e.target.className === 'option2'){\r\n                currOption.ans[0] = '';\r\n                currOption.ans[1] = e.target.value;\r\n            }\r\n        }\r\n        // console.log(\"Save option \",currOption);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(survey.questions);\r\n        survey.questions.map((q, qId) => {\r\n            let arr = {\r\n                qId: q.qId,\r\n                type: '',\r\n                ans: ['','','','']\r\n            }\r\n            answers.push(arr);\r\n        })\r\n        // console.log(\"answers \",answers);\r\n    })\r\n\r\n\treturn(\r\n        <div className=\"all-question-container\">\r\n        <h5 style={{textAlign:'center', color:'#4caf50'}}>Mark correct option for auto check</h5>\r\n        {survey.questions.map((q, qId) => (\r\n            <div className=\"survey-question-container\" key={qId} id={qId} onChange={(e)=> saveAnswer(e, qId+1, q.type)}>\r\n                <div className=\"question\">{q.question}</div>\r\n                {q.type ==='single' ? (\r\n                    <div className=\"single\"style={{margin: \"10px\"}}>\r\n                        <div className=\"option1\">\r\n                            <input name={qId} type=\"radio\" className=\"option1\" value={q.options[0]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\r\n                        </div>\r\n                        <div className=\"option2\">\r\n                            <input name={qId} type=\"radio\" className=\"option2\" value={q.options[1]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\r\n                        </div>\r\n                    </div>\r\n                ):(\r\n                    <div className=\"multiple\" >\r\n                        <div className=\"option1\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option1\" value={q.options[0]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\r\n                        </div>\r\n                        <div className=\"option2\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option2\" value={q.options[1]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\r\n                        </div>\r\n                        <div className=\"option3\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option3\" value={q.options[2]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[2]}</label>\r\n                        </div>\r\n                        <div className=\"option3\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option4\" value={q.options[3]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[3]}</label>\r\n                        </div>\r\n                    </div> \r\n                )}\r\n            </div>\r\n        ))}\r\n            <Button onClick={confirmAndPublishSurvey} className=\"survey-main-btn\">Confirm Survey</Button>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\survey.js",["65","66","67"],"import React,{useState, useEffect} from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { responseSlice } from '../store/responseSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport '../index.css'\r\n\r\nexport default function Survey() {\r\n    const [answers, setAnswer] = useState([]);\r\n    const { surveyId } = useParams();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const survey = useSelector((globalStore) => \r\n        globalStore.surveys.find((s) => s.surveyId === surveyId)\r\n    );\r\n    const SubmitSurvey=()=> {\r\n        dispatch(responseSlice.actions.userAnswer({answers, surveyId}))\r\n        history.push(\"/survey-result/\"+surveyId);\r\n    };\r\n\r\n\r\n    const saveAnswer=(e, qId, type)=> {\r\n        // console.log(\"input value \",e.target.value);\r\n        let currOption = answers.find((a) => a.qId === String(qId))\r\n        if(type === 'multiple'){\r\n            currOption.type = 'multiple';\r\n            if(e.target.checked){\r\n                if(e.target.className === 'option1'){\r\n                    currOption.ans[0] = e.target.value;\r\n                }else if(e.target.className === 'option2'){\r\n                    currOption.ans[1] = e.target.value;\r\n                }\r\n                else if(e.target.className === 'option3'){\r\n                    currOption.ans[2] = e.target.value;\r\n                }\r\n                else if(e.target.className === 'option4'){\r\n                    currOption.ans[3] = e.target.value;\r\n                }\r\n            }else{\r\n                if(e.target.className === 'option1'){\r\n                    currOption.ans[0] = ''\r\n                }else if(e.target.className === 'option2'){\r\n                    currOption.ans[1] = ''\r\n                }\r\n                else if(e.target.className === 'option3'){\r\n                    currOption.ans[2] = ''\r\n                }\r\n                else if(e.target.className === 'option4'){\r\n                    currOption.ans[3] = ''\r\n                }\r\n            }\r\n        }else {\r\n            currOption.type = 'single';\r\n            if(e.target.className === 'option1'){\r\n                currOption.ans[0] = e.target.value;\r\n                currOption.ans[1] = '';\r\n            }else if(e.target.className === 'option2'){\r\n                currOption.ans[0] = '';\r\n                currOption.ans[1] = e.target.value;\r\n            }\r\n        }\r\n        // console.log(\"Save option \",currOption);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(survey.questions);\r\n        survey.questions.map((q, qId) => {\r\n            let arr = {\r\n                qId: q.qId,\r\n                type: '',\r\n                ans: ['','','','']\r\n            }\r\n            answers.push(arr);\r\n        })\r\n        // console.log(\"answers \",answers);\r\n    },[])\r\n    \r\n\treturn(\r\n        <div className=\"all-question-container\">\r\n        {survey.questions.map((q, qId) => (\r\n            <div className=\"survey-question-container\" key={qId} onChange={(e)=> saveAnswer(e, qId+1, q.type)}>\r\n                <div className=\"question\">{q.question}</div>\r\n                {q.type ==='single' ? (\r\n                    <div className=\"single\"style={{margin: \"10px\"}}>\r\n                        <div className=\"option1\">\r\n                            <input name={qId} type=\"radio\" className=\"option1\" value={q.options[0]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\r\n                        </div>\r\n                        <div className=\"option2\">\r\n                            <input name={qId} type=\"radio\" className=\"option2\" value={q.options[1]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\r\n                        </div>\r\n                    </div>\r\n                ):(\r\n                    <div className=\"multiple\" >\r\n                        <div className=\"option1\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option1\" value={q.options[0]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\r\n                        </div>\r\n                        <div className=\"option2\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option2\" value={q.options[1]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\r\n                        </div>\r\n                        <div className=\"option3\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option3\" value={q.options[2]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[2]}</label>\r\n                        </div>\r\n                        <div className=\"option3\">\r\n                            <input name={qId} type=\"checkbox\" className=\"option4\" value={q.options[3]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[3]}</label>\r\n                        </div>\r\n                    </div> \r\n                )}\r\n            </div>\r\n        ))}\r\n        <Button onClick={SubmitSurvey} className=\"survey-main-btn\">Submit Survey</Button>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Vinu\\Desktop\\web\\React-Redux\\survey_tiger\\src\\components\\survey-result.js",["68","69","70","71"],"import React, {useState, useEffect} from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nexport default function SurveyResult() {\r\n    let [mark, setMark] = useState(0);\r\n    const history = useHistory();\r\n    const { surveyId } = useParams();\r\n    const survey = useSelector((globalStore) => \r\n        globalStore.surveys.find((s) => s.surveyId === surveyId)\r\n    );\r\n    const response = useSelector((globalStore) =>\r\n        globalStore.responses.find((s) => s.surveyId === surveyId).answers  \r\n    );\r\n\r\n    const result = survey.answers;\r\n    // console.log(response);\r\n    \r\n    useEffect(() => {\r\n        survey.answers.map((q, qId) =>{\r\n            response.find((a) => {\r\n                let flag = true;\r\n                if((a.qId === q.qId)){\r\n                    for(let i=0; i<a.ans.length; i++){\r\n                        if(a.ans[i] !== q.ans[i]){\r\n                            flag = false;\r\n                        }\r\n                        if(a.ans[i].length > 0){\r\n                            if(q.type === 'multiple'){\r\n                                document.getElementsByName(qId)[i].checked = 'true';\r\n                            }else{\r\n                                // if(a.ans[i] === ''){\r\n                                    document.getElementsByName(qId)[i].checked = 'true';\r\n                                // }\r\n                                // else{\r\n                                //     document.getElementsByName(qId)[i].checked = 'true';\r\n                                // }\r\n                                // break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if(flag){\r\n                        document.getElementById(qId).style.backgroundColor = '#4caf5047';\r\n                        mark++;\r\n                        setMark(mark);\r\n                    }else{\r\n                        document.getElementById(qId).style.backgroundColor = '#ff000024';\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    },[]);\r\n\r\n    const GotoHome=()=> {\r\n        history.push('/');\r\n    }\r\n\treturn(\r\n        <div className=\"all-question-container\">\r\n        <h4 style={{textAlign: 'center'}}>Survey Result {mark} / {survey.questions.length}</h4>\r\n        {survey.questions.map((q, qId) => (\r\n            <div className=\"survey-question-container\" id={qId} key={qId}>\r\n                <div className=\"question\">{q.question}</div>\r\n                {q.type ==='single' ? (\r\n                    <div className=\"single\"style={{margin: \"10px\"}}>\r\n                        <div className=\"option1\">\r\n                            <input disabled name={qId} type=\"radio\" className=\"option\" value={q.options[0]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\r\n                        </div>\r\n                        <div className=\"option2\">\r\n                            <input disabled name={qId} type=\"radio\" className=\"option\" value={q.options[1]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\r\n                        </div>\r\n                    </div>\r\n                ):(\r\n                    <div className=\"multiple\" >\r\n                        <div className=\"option1\">\r\n                            <input disabled name={qId} type=\"checkbox\" className=\"option1\" value={q.options[0]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[0]}</label>\r\n                        </div>\r\n                        <div className=\"option2\">\r\n                            <input disabled name={qId} type=\"checkbox\" className=\"option2\" value={q.options[1]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[1]}</label>\r\n                        </div>\r\n                        <div className=\"option3\">\r\n                            <input disabled name={qId} type=\"checkbox\" className=\"option3\" value={q.options[2]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[2]}</label>\r\n                        </div>\r\n                        <div className=\"option3\">\r\n                            <input disabled name={qId} type=\"checkbox\" className=\"option4\" value={q.options[3]}></input>\r\n                            <label style={{marginLeft: \"5px\"}} htmlFor={qId}>{q.options[3]}</label>\r\n                        </div>\r\n                    </div> \r\n                )}\r\n            </div>\r\n        ))}\r\n        <Button onClick={()=> GotoHome()} className=\"survey-main-btn\">Home</Button>\r\n        </div>\r\n    );\r\n}\r\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"72","replacedBy":"76"},{"ruleId":"74","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":10,"column":21,"nodeType":"80","messageId":"81","endLine":10,"endColumn":31},{"ruleId":"82","severity":1,"message":"83","line":70,"column":39,"nodeType":"84","messageId":"85","endLine":70,"endColumn":41},{"ruleId":"78","severity":1,"message":"86","line":10,"column":21,"nodeType":"80","messageId":"81","endLine":10,"endColumn":30},{"ruleId":"82","severity":1,"message":"83","line":68,"column":39,"nodeType":"84","messageId":"85","endLine":68,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":77,"column":7,"nodeType":"89","endLine":77,"endColumn":9,"suggestions":"90"},{"ruleId":"78","severity":1,"message":"91","line":17,"column":11,"nodeType":"80","messageId":"81","endLine":17,"endColumn":17},{"ruleId":"82","severity":1,"message":"83","line":21,"column":37,"nodeType":"84","messageId":"85","endLine":21,"endColumn":39},{"ruleId":"82","severity":1,"message":"92","line":22,"column":31,"nodeType":"84","messageId":"85","endLine":22,"endColumn":33},{"ruleId":"87","severity":1,"message":"93","line":53,"column":7,"nodeType":"89","endLine":53,"endColumn":9,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],["95"],["96"],"no-unused-vars","'setAnswers' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setAnswer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'answers' and 'survey.questions'. Either include them or remove the dependency array.","ArrayExpression",["97"],"'result' is assigned a value but never used.","Array.prototype.find() expects a return value from arrow function.","React Hook useEffect has missing dependencies: 'mark', 'response', and 'survey.answers'. Either include them or remove the dependency array. You can also do a functional update 'setMark(m => ...)' if you only need 'mark' in the 'setMark' call.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [answers, survey.questions]",{"range":"103","text":"104"},"Update the dependencies array to be: [mark, response, survey.answers]",{"range":"105","text":"106"},[2883,2885],"[answers, survey.questions]",[2137,2139],"[mark, response, survey.answers]"]